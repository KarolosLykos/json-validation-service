// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DownloadSchema mocks base method.
func (m *MockService) DownloadSchema(ctx context.Context, schemaID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadSchema", ctx, schemaID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadSchema indicates an expected call of DownloadSchema.
func (mr *MockServiceMockRecorder) DownloadSchema(ctx, schemaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadSchema", reflect.TypeOf((*MockService)(nil).DownloadSchema), ctx, schemaID)
}

// UploadSchema mocks base method.
func (m *MockService) UploadSchema(ctx context.Context, schemaID, schema string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSchema", ctx, schemaID, schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadSchema indicates an expected call of UploadSchema.
func (mr *MockServiceMockRecorder) UploadSchema(ctx, schemaID, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSchema", reflect.TypeOf((*MockService)(nil).UploadSchema), ctx, schemaID, schema)
}

// ValidateSchema mocks base method.
func (m *MockService) ValidateSchema(ctx context.Context, schemaID string, payload map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSchema", ctx, schemaID, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSchema indicates an expected call of ValidateSchema.
func (mr *MockServiceMockRecorder) ValidateSchema(ctx, schemaID, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSchema", reflect.TypeOf((*MockService)(nil).ValidateSchema), ctx, schemaID, payload)
}
